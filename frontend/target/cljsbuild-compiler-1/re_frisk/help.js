// Compiled by ClojureScript 1.9.89 {:static-fns true, :optimize-constants true}
goog.provide('re_frisk.help');
goog.require('cljs.core');
re_frisk.help.fx = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$db,"reset! app-db with a new value. Expects a map. / re-frame's internal",cljs.core.cst$kw$dispatch,"`dispatch` one event. Expects a single vector. / re-frame's internal",cljs.core.cst$kw$dispatch_DASH_n,"`dispatch` more than one event. Expects a list or vector of events. Something for which sequential? returns true. / re-frame's internal",cljs.core.cst$kw$deregister_DASH_event_DASH_handler,"Removes a previously registered event handler. Expects either a single id (typically a keyword), or a seq of ids. / re-frame's internal",cljs.core.cst$kw$dispatch_DASH_later,"`dispatch` one or more events after given delays. Expects a collection of maps with two keys:  :`ms` and `:dispatch`. / re-frame's internal"], null);
re_frisk.help.cofx = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$db,"Adds to coeffects the value in `app-db`, under the key `:db`. / re-frame's internal"], null);
re_frisk.help.intrcp = new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$coeffects,"An interceptor which injects re-frame :db coeffect. / re-frame's internal",cljs.core.cst$kw$do_DASH_fx,"An interceptor which actions a `context's` (side) `:effects`. For each key in the `:effects` map, call the `effects handler` previously registered using `reg-fx`. / re-frame's internal",cljs.core.cst$kw$db_DASH_handler,"An interceptor which wraps the kind of event handler given to `reg-event-db`. These handlers take two arguments;  `db` and `event`, and they return `db`. / re-frame's internal",cljs.core.cst$kw$fx_DASH_handler,"An interceptor which wraps the kind of event handler given to `reg-event-fx`. These handlers take two arguments;  `coeffects` and `event`, and they return `effects`. / re-frame's internal"], null);
re_frisk.help.intrcp_fn = new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$coeffects,"Function which adds to coeffects the value in `app-db`, under the key `:db`. / re-frame's internal",cljs.core.cst$kw$do_DASH_fx,"Function which calls the `effects handler` previously registered using `reg-fx` for each key in the `:effects` map. / re-frame's internal",cljs.core.cst$kw$db_DASH_handler,"Function which calls the handler given to `reg-event-db`. This handler take two arguments;  `db` and `event`, and returns `db`. / re-frame's internal",cljs.core.cst$kw$fx_DASH_handler,"Function which calls the handler given to `reg-event-fx`. This handler take two arguments;  `coeffects` and `event`, and returns `effects`. / re-frame's internal"], null);
